import styles from "./authorization.module.scss";
import { useState } from "react";
import { apiRequests } from "../../shared/api/apiRequests";
import Cookies from "js-cookie";
import { setUserData } from "../../shared/store/main";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";
import passwordIco from "../../shared/images/password.svg";

export const AuthorizationPage = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isVisiblePass, setVisible] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [showIPInfo, setShowIPInfo] = useState(false);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleChange = (value) => {
    setEmail(value);
    // if (emailRegex.test(value) || value === "") {
    //   setEmail(value);
    // }
  };

  const handleSubmit = async () => {
    setErrorMessage("");
    setShowIPInfo(false);
    
    await apiRequests.auth
      .login({
        email,
        password,
      })
      .then((res) => {
        Cookies.set("accessToken", res.data.access_token);
        Cookies.set("refreshToken", res.data.refresh_token);
        dispatch(setUserData({ ...res.data.user }));
        navigate("/stats");
      })
      .catch((e) => {
        const detail = e.response?.data?.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞";
        
        if (e.response?.status === 403 && detail.includes("IP –∞–¥—Ä–µ—Å")) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP
          setShowIPInfo(true);
          setErrorMessage(detail);
        } else {
          setErrorMessage(detail);
        }
      });
  };

  return (
    <div>
      <div className="mobile-container">
        <header className="mobile-header">
          <h4>–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</h4>
        </header>

        <div className={styles.wrapper}>
          <div className={styles.form}>
            <div className={styles.inputBody}>
              <input
                value={email}
                onChange={(e) => handleChange(e.target.value)}
                type="text"
                placeholder={"Email"}
              />
            </div>
          </div>
          <div className={styles.passBody}>
            <input
              value={password}
              placeholder={"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"}
              onChange={(e) => setPassword(e.target.value)}
              type={isVisiblePass ? "text" : "password"}
              className={styles.inputPassword}
            />
            <button onClick={() => setVisible((prev) => !prev)}>
              <img src={passwordIco} alt="" />
            </button>
          </div>

          <button onClick={handleSubmit} className={"blue-button"}>
            –í–æ–π—Ç–∏
          </button>

          {errorMessage && (
            <div className={styles.errorMessage}>
              {errorMessage}
            </div>
          )}

          {showIPInfo && (
            <div className={styles.ipInfoCard}>
              <h4>üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ</h4>
              <p>–í–∞—à IP –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.</p>
              <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.</p>
              <div className={styles.ipInfoDetails}>
                <strong>–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</strong>
                <ul>
                  <li>–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP-–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                  <li>–¢–æ–ª—å–∫–æ IP-–∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</li>
                  <li>–í–∞—à IP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</li>
                </ul>
              </div>
            </div>
          )}

          {/* <Link className={styles.resetPassword} to={"/reset_password"}>
            –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
          </Link> */}
        </div>
      </div>
    </div>
  );
};
