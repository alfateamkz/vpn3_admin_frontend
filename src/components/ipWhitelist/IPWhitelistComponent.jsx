import React, { useState, useEffect } from "react";
import "./IPWhitelistComponent.scss";
import { apiRequests } from "../../shared/api/apiRequests";

export const IPWhitelistComponent = () => {
  const [ipList, setIpList] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [limit] = useState(10);
  const [totalCount, setTotalCount] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [ipAddress, setIpAddress] = useState("");
  const [description, setDescription] = useState("");
  const [loading, setLoading] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    try {
      const data = await apiRequests.ipWhitelist.list(currentPage, limit);
      console.log("IP Whitelist data:", data); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      setIpList(data.ips || []);
      setTotalCount(data.total || 0);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
      
      if (error.response?.status === 403) {
        const errorMessage = error.response?.data?.detail || "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω";
        alert(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${errorMessage}`);
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ IP, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        setIpList([]);
        setTotalCount(0);
      } else {
        const errorMessage = error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ IP";
        alert(errorMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentPage, limit]);

  const handleAddIP = async () => {
    if (!ipAddress) {
      alert("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å");
      return;
    }

    setLoading(true);
    try {
      await apiRequests.ipWhitelist.add(ipAddress, description);
      alert("IP —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫");
      setIsModalOpen(false);
      setIpAddress("");
      setDescription("");
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      setCurrentPage(1);
      await fetchData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ IP:", error);
      const errorMessage = error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ IP";
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveIP = async (ip) => {
    if (!window.confirm(`–£–¥–∞–ª–∏—Ç—å IP ${ip.ip_address} –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞?`)) {
      return;
    }

    setLoading(true);
    try {
      await apiRequests.ipWhitelist.remove(ip.ip_address);
      alert("IP —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞");
      fetchData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ IP:", error);
      const errorMessage = error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ IP";
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleToggleIP = async (ip) => {
    setLoading(true);
    try {
      await apiRequests.ipWhitelist.toggle(ip.ip_address, !ip.is_active);
      fetchData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ IP:", error);
      const errorMessage = error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ IP";
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="ip-whitelist-container">
      <div className="header-bar">
        <h2>üîê IP –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</h2>
        <button
          className="add-button"
          onClick={() => setIsModalOpen(true)}
          disabled={loading}
        >
          + –î–æ–±–∞–≤–∏—Ç—å IP
        </button>
      </div>

      {isModalOpen && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>–î–æ–±–∞–≤–∏—Ç—å IP –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</h3>
            <input
              type="text"
              placeholder="IP –∞–¥—Ä–µ—Å"
              value={ipAddress}
              onChange={(e) => setIpAddress(e.target.value)}
            />
            <input
              type="text"
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
            <div className="modal-actions">
              <button onClick={handleAddIP} disabled={loading}>
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
              <button
                onClick={() => {
                  setIsModalOpen(false);
                  setIpAddress("");
                  setDescription("");
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      <table className="ip-table">
        <thead>
          <tr>
            <th>IP –ê–¥—Ä–µ—Å</th>
            <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {ipList.map((ip) => (
            <tr key={ip.id}>
              <td>{ip.ip_address}</td>
              <td>{ip.description || "‚Äî"}</td>
              <td>
                <span
                  className={ip.is_active ? "status-active" : "status-inactive"}
                >
                  {ip.is_active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
                </span>
              </td>
              <td>
                {ip.created_at
                  ? new Date(ip.created_at).toLocaleString()
                  : "‚Äî"}
              </td>
              <td>
                <div className="action-buttons">
                  <button
                    onClick={() => handleToggleIP(ip)}
                    className={ip.is_active ? "btn-inactive" : "btn-active"}
                  >
                    {ip.is_active ? "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}
                  </button>
                  <button
                    onClick={() => handleRemoveIP(ip)}
                    className="btn-delete"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {ipList.length === 0 && !loading && (
        <div className="empty-state">
          <p>üìã –°–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç</p>
          <p>–î–æ–±–∞–≤—å—Ç–µ IP –∞–¥—Ä–µ—Å–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</p>
        </div>
      )}

      <div className="pagination-info">
        <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {Math.ceil(totalCount / limit)}</p>
        <div className="pagination-controls">
          <button
            onClick={() => setCurrentPage(currentPage - 1)}
            disabled={currentPage === 1 || loading}
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <button
            onClick={() => setCurrentPage(currentPage + 1)}
            disabled={currentPage >= Math.ceil(totalCount / limit) || loading}
          >
            –í–ø–µ—Ä–µ–¥ ‚Üí
          </button>
        </div>
      </div>
    </div>
  );
};

