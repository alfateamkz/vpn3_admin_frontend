import React, { useState, useEffect } from "react";
import styles from "./AlertsComponent.module.scss";
import { apiRequests } from "../../shared/api/apiRequests";
import { PaginationControls } from "../pagination/PaginationComponent";

const severityColors = {
  low: "#2196F3",
  medium: "#FF9800",
  high: "#F44336",
  critical: "#9C27B0",
};

const severityLabels = {
  low: "–ù–∏–∑–∫–∞—è",
  medium: "–°—Ä–µ–¥–Ω—è—è",
  high: "–í—ã—Å–æ–∫–∞—è",
  critical: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è",
};

const alertTypeLabels = {
  user_churn: "–û—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
  suspicious_activity: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
  registration_spike: "–†–æ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π",
};

const statusLabels = {
  active: "–ê–∫—Ç–∏–≤–Ω—ã–π",
  resolved: "–†–∞–∑—Ä–µ—à–µ–Ω",
  dismissed: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
};

const AlertsComponent = () => {
  const [alerts, setAlerts] = useState([]);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [limit, setLimit] = useState(50);
  const [filters, setFilters] = useState({
    status: "",
    alert_type: "",
    severity: "",
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchAlerts();
  }, [currentPage, limit, filters]);

  const fetchAlerts = async () => {
    setLoading(true);
    try {
      const response = await apiRequests.monitoring.alerts(
        currentPage,
        limit,
        filters.status || null,
        filters.alert_type || null,
        filters.severity || null
      );
      setAlerts(response.data.alerts || []);
      setTotalCount(response.data.total || 0);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª–µ—Ä—Ç–æ–≤:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª–µ—Ä—Ç–æ–≤");
    } finally {
      setLoading(false);
    }
  };

  const handleResolve = async (alertId) => {
    try {
      await apiRequests.monitoring.resolveAlert(alertId);
      alert("–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω");
      fetchAlerts();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞");
    }
  };

  const handleDismiss = async (alertId) => {
    try {
      await apiRequests.monitoring.dismissAlert(alertId);
      alert("–ê–ª–µ—Ä—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω");
      fetchAlerts();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞");
    }
  };

  const handleManualCheck = async () => {
    try {
      setLoading(true);
      await apiRequests.monitoring.check();
      alert("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ù–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.");
      setTimeout(() => {
        fetchAlerts();
      }, 2000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.alertsContainer}>
      <div className={styles.alertsHeader}>
        <h2>–ê–ª–µ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h2>
        <div className={styles.headerActions}>
          <button onClick={handleManualCheck} className={styles.checkButton} disabled={loading}>
            üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
          </button>
        </div>
      </div>

      <div className={styles.filters}>
        <select
          value={filters.status}
          onChange={(e) => setFilters({ ...filters, status: e.target.value })}
        >
          <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
          <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
          <option value="resolved">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ</option>
          <option value="dismissed">–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ</option>
        </select>

        <select
          value={filters.alert_type}
          onChange={(e) => setFilters({ ...filters, alert_type: e.target.value })}
        >
          <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
          <option value="user_churn">–û—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</option>
          <option value="suspicious_activity">–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
          <option value="registration_spike">–†–æ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π</option>
        </select>

        <select
          value={filters.severity}
          onChange={(e) => setFilters({ ...filters, severity: e.target.value })}
        >
          <option value="">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
          <option value="low">–ù–∏–∑–∫–∞—è</option>
          <option value="medium">–°—Ä–µ–¥–Ω—è—è</option>
          <option value="high">–í—ã—Å–æ–∫–∞—è</option>
          <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è</option>
        </select>
      </div>

      {loading ? (
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : alerts.length === 0 ? (
        <div className={styles.emptyState}>–ê–ª–µ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
      ) : (
        <>
          <div className={styles.alertsList}>
            {alerts.map((alert) => (
              <div
                key={alert._id || alert.id}
                className={styles.alertCard}
                style={{
                  borderLeft: `4px solid ${severityColors[alert.severity] || "#ccc"}`,
                }}
              >
                <div className={styles.alertHeader}>
                  <div className={styles.alertTitle}>
                    <span
                      className={styles.severityBadge}
                      style={{ backgroundColor: severityColors[alert.severity] || "#ccc" }}
                    >
                      {severityLabels[alert.severity] || alert.severity}
                    </span>
                    <h3>{alert.title}</h3>
                  </div>
                  <div className={styles.alertMeta}>
                    <span className={styles.alertType}>
                      {alertTypeLabels[alert.alert_type] || alert.alert_type}
                    </span>
                    <span
                      className={styles.statusBadge}
                      data-status={alert.status}
                    >
                      {statusLabels[alert.status] || alert.status}
                    </span>
                  </div>
                </div>

                <div className={styles.alertBody}>
                  <p>{alert.description}</p>

                  {alert.details && Object.keys(alert.details).length > 0 && (
                    <div className={styles.alertDetails}>
                      <strong>–î–µ—Ç–∞–ª–∏:</strong>
                      <ul>
                        {Object.entries(alert.details).map(([key, value]) => (
                          <li key={key}>
                            <strong>{key}:</strong> {JSON.stringify(value)}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {alert.affected_users && alert.affected_users.length > 0 && (
                    <div className={styles.affectedUsers}>
                      <strong>–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {alert.affected_users.length}</strong>
                    </div>
                  )}

                  {alert.created_at && (
                    <div className={styles.alertDate}>
                      –°–æ–∑–¥–∞–Ω: {new Date(alert.created_at).toLocaleString("ru-RU")}
                    </div>
                  )}
                </div>

                {alert.status === "active" && (
                  <div className={styles.alertActions}>
                    <button
                      onClick={() => handleResolve(alert._id || alert.id)}
                      className={styles.resolveButton}
                    >
                      ‚úì –†–∞–∑—Ä–µ—à–∏—Ç—å
                    </button>
                    <button
                      onClick={() => handleDismiss(alert._id || alert.id)}
                      className={styles.dismissButton}
                    >
                      ‚úï –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>

          <PaginationControls
            currentPage={currentPage}
            setCurrentPage={setCurrentPage}
            limit={limit}
            setLimit={setLimit}
            totalCount={totalCount}
          />
        </>
      )}
    </div>
  );
};

export default AlertsComponent;
