import React, { useState, useEffect } from "react";
import styles from "./ServersComponent.module.scss";
import { formatBytes } from "../../shared/utils/formatBytes";
import { apiRequests } from "../../shared/api/apiRequests";

import { CreateServerModal } from "../modals/CreateServerModal";
import { PaginationControls } from "../pagination/PaginationComponent";

const statuses = {
  inactived: "–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π",
  actived: "–ê–∫—Ç–∏–≤–Ω—ã–π",
  error: "–û—à–∏–±–∫–∞",
};

const ServersTable = ({ getServers, onEdit, onDelete, onSave, onCreate }) => {
  const [servers, setServers] = useState({ count: 0, documents: [] });
  const [editableRow, setEditableRow] = useState(null);
  const [editedData, setEditedData] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const [limit, setLimit] = useState(10); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const [totalCount, setTotalCount] = useState(0);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [refreshingStats, setRefreshingStats] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getServers(currentPage, limit);
        setServers(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        setTotalCount(data.count);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
        refreshStatsInBackground(data.documents);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    };

    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentPage, limit]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ useEffec

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
  const refreshStatsInBackground = async (serversList) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ –∫—ç—à–∞ –∏–ª–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const serversToUpdate = serversList.filter(
      (server) =>
        server.status === "actived" &&
        (!server.inbound || server.stats_stale)
    );

    if (serversToUpdate.length > 0) {
      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞)
        apiRequests.servers.refreshStats(null, false).catch((err) => {
          console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      }
    }
  };

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const handleRefreshStats = async () => {
    setRefreshingStats(true);
    try {
      await apiRequests.servers.refreshStats(null, true);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(async () => {
        const data = await getServers(currentPage, limit);
        setServers(data);
        setRefreshingStats(false);
      }, 2000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      setRefreshingStats(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const handleEdit = (index, server) => {
    setEditableRow(index);
    setEditedData({ ...server });
  };

  const handleReturnEdit = () => {
    setEditableRow(null);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const handleCreateServer = async (newServer) => {
    try {
      await onCreate(newServer); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
      const data = await getServers(currentPage, limit); // Refetch –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setTotalCount(data.count);
      setServers(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async (index) => {
    try {
      await onSave(editedData); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
      const data = await getServers(currentPage, limit); // Refetch –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setServers(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
      setTotalCount(data.count);
      setEditableRow(null);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  const handleDelete = async (server_id) => {
    try {
      await onDelete(server_id); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      const data = await getServers(currentPage, limit); // Refetch –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setTotalCount(data.count);
      setServers(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleChange = (e, key) => {
    setEditedData({
      ...editedData,
      [key]: e.target.value,
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusChange = (e) => {
    setEditedData({
      ...editedData,
      status: e.target.value,
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div className={styles.serversTableContainer}>
      <h2>–°–µ—Ä–≤–µ—Ä—ã</h2>
      <div className={styles.serversHeader}>
        <p>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {totalCount}</p>
        <div className={styles.headerButtons}>
          <button
            onClick={handleRefreshStats}
            disabled={refreshingStats}
          >
            {refreshingStats ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}
          </button>
          <button onClick={handleOpenModal}>
            –î–æ–±–∞–≤–∏—Ç—å
          </button>
        </div>
      </div>
      <table className={styles.serversTable}>
        <thead>
          <tr>
            <th>–°—Ç—Ä–∞–Ω–∞</th>
            {/* <th>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</th> */}
            <th>URL –ø–∞–Ω–µ–ª–∏</th>
            <th>–õ–æ–≥–∏–Ω</th>
            <th>–ü–∞—Ä–æ–ª—å</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–í—ã–≥—Ä—É–∂–µ–Ω–æ</th>
            <th>–ó–∞–≥—Ä—É–∂–µ–Ω–æ</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {servers.documents.map((server, index) => (
            <tr key={index}>
              <td>
                {editableRow === index ? (
                  <input
                    type="text"
                    value={editedData.country}
                    onChange={(e) => handleChange(e, "country")}
                  />
                ) : (
                  server.country
                )}
              </td>
              {/* <td>
                {editableRow === index ? (
                  <input
                    type="text"
                    value={editedData.connect_link}
                    onChange={(e) => handleChange(e, "connect_link")}
                  />
                ) : (
                  server.connect_link.slice(0, 40) + "..." // –°–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
                )}
              </td> */}
              <td>
                {editableRow === index ? (
                  <input
                    type="text"
                    value={editedData.board_url}
                    onChange={(e) => handleChange(e, "board_url")}
                  />
                ) : (
                  <a
                    href={server.board_url}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {server.board_url}
                  </a>
                )}
              </td>
              <td>
                {editableRow === index ? (
                  <input
                    type="text"
                    value={editedData.board_login}
                    onChange={(e) => handleChange(e, "board_login")}
                  />
                ) : (
                  server.board_login
                )}
              </td>
              <td>
                {editableRow === index ? (
                  <input
                    type="text"
                    value={editedData.board_password}
                    onChange={(e) => handleChange(e, "board_password")}
                  />
                ) : (
                  server.board_password
                )}
              </td>
              <td>
                {editableRow === index ? (
                  <select
                    value={editedData.status}
                    onChange={handleStatusChange}
                  >
                    <option value="actived">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                    <option value="inactived">–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π</option>
                  </select>
                ) : (
                  statuses[server.status]
                )}
              </td>
              <td>
                {server.inbound?.up ? (
                  <span
                    title={
                      server.stats_stale
                        ? "–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏"
                        : ""
                    }
                    style={{
                      opacity: server.stats_stale ? 0.6 : 1,
                    }}
                  >
                    {formatBytes(server.inbound.up)}
                    {server.stats_stale && " ‚ö†Ô∏è"}
                  </span>
                ) : (
                  <span style={{ color: "#999" }}>‚Äî</span>
                )}
              </td>
              <td>
                {server.inbound?.down ? (
                  <span
                    title={
                      server.stats_stale
                        ? "–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏"
                        : ""
                    }
                    style={{
                      opacity: server.stats_stale ? 0.6 : 1,
                    }}
                  >
                    {formatBytes(server.inbound.down)}
                    {server.stats_stale && " ‚ö†Ô∏è"}
                  </span>
                ) : (
                  <span style={{ color: "#999" }}>‚Äî</span>
                )}
              </td>
              <td>
                {editableRow === index ? (
                  <>
                    <button onClick={() => handleSave(index)}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button onClick={() => handleReturnEdit(index)}>
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  </>
                ) : (
                  <>
                    <button onClick={() => handleEdit(index, server)}>
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button onClick={() => handleDelete(server._id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <PaginationControls
        currentPage={currentPage}
        setCurrentPage={setCurrentPage}
        limit={limit}
        setLimit={setLimit}
        totalCount={totalCount}
      />

      <CreateServerModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onCreate={handleCreateServer}
      />
    </div>
  );
};

export default ServersTable;
